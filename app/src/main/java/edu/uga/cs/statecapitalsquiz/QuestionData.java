package edu.uga.cs.statecapitalsquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class QuestionData {

    private SQLiteDatabase db;
    private SQLiteOpenHelper questionDbHelper;
    private static final String[] allColumns = {
            QuestionDBHelper.QUESTIONS_COLUMN_ID,
            QuestionDBHelper.QUESTIONS_COLUMN_STATE,
            QuestionDBHelper.QUESTIONS_COLUMN_ANSWER1,
            QuestionDBHelper.QUESTIONS_COLUMN_ANSWER2,
            QuestionDBHelper.QUESTIONS_COLUMN_ANSWER3,
    };

    public QuestionData(Context context) {
        this.questionDbHelper = QuestionDBHelper.getInstance(context);
    }

    public void open() {
        db = questionDbHelper.getWritableDatabase();
    }

    public void close() {
        if( questionDbHelper != null ) {
            questionDbHelper.close();
        }
    }

    public boolean isDBOpen()
    {
        return db.isOpen();
    }

    public List<Question> retrieveAllQuestions() {
        ArrayList<Question> questions = new ArrayList<>();
        Cursor cursor = null;
        int columnIndex;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query(QuestionDBHelper.TABLE_QUESTIONS, allColumns,
                    null, null, null, null, null );

            if( cursor != null && cursor.getCount() > 0 ) {

                while( cursor.moveToNext() ) {

                    if( cursor.getColumnCount() >= 5) {

                        // Get all the attributes of this question
                        columnIndex = cursor.getColumnIndex(QuestionDBHelper.QUESTIONS_COLUMN_ID );
                        long id = cursor.getLong( columnIndex );
                        columnIndex = cursor.getColumnIndex(QuestionDBHelper.QUESTIONS_COLUMN_STATE);
                        String state = cursor.getString( columnIndex );
                        columnIndex = cursor.getColumnIndex(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER1);
                        String answer1 = cursor.getString( columnIndex );
                        columnIndex = cursor.getColumnIndex(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER2);
                        String answer2 = cursor.getString( columnIndex );
                        columnIndex = cursor.getColumnIndex(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER3);
                        String answer3 = cursor.getString( columnIndex );

                        // Create a new Question object
                        Question question = new Question(state, answer1, answer2, answer3);
                        question.setId(id); // Set the id of the Question object
                        // Add it to the question database
                        questions.add(question);
                    }
                }
            }
            Log.d("QuestionData", "Number of questions retrieved: " + questions.size());
        }
        catch(Exception e) {
            Log.d("Exception", "Exception caught");
        }
        finally{
            // Closing the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        // Return a list of all questions
        return questions;
    }

    public Question storeQuestion( Question question ) {

        // Prepare the values for all of the necessary columns in the table
        // and set their values to the variables of the Question argument.
        // This is how we are providing persistence to a JobLead (Java object) instance
        // by storing it as a new row in the database table representing job leads.
        ContentValues values = new ContentValues();
        values.put(QuestionDBHelper.QUESTIONS_COLUMN_STATE, question.getState());
        values.put(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER1, question.getAnswer1());
        values.put(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER2, question.getAnswer2());
        values.put(QuestionDBHelper.QUESTIONS_COLUMN_ANSWER3, question.getAnswer3());

        // Insert the new row into the database table;
        // The id (primary key) is automatically generated by the database system
        // and returned as from the insert method call.
        long id = db.insert(QuestionDBHelper.TABLE_QUESTIONS, null, values);

        // Store the id (the primary key) in the Question instance, as it is now persistent
        question.setId(id);

        return question;
    }
}
